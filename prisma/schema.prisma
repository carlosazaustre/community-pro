generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}


model User {
  id                   Int                   @id @default(autoincrement())
  username             String                @unique
  email                String                @unique
  passwordHash         String
  dateJoined           DateTime              @default(now())
  lastLogin            DateTime?
  isActive             Boolean               @default(true)
  isAdmin              Boolean               @default(false)
  profilePicture       String?
  bio                  String?
  conversations        Conversation[]        @relation("UserConversations")
  comments             Comment[]             @relation("UserComments")
  notifications        Notification[]
  passwordResetTokens  PasswordResetToken[]
  userActivities       UserActivity[]
}

model Conversation {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  user                 User                  @relation("UserConversations", fields: [userId], references: [id])
  title                String
  content              String
  topicId              Int?
  topic                Topic?                @relation(fields: [topicId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  isPinned             Boolean               @default(false)
  comments             Comment[]
  notifications        Notification[]
  userActivities       UserActivity[]
}

model Comment {
  id                   Int                   @id @default(autoincrement())
  conversationId       Int
  conversation         Conversation          @relation(fields: [conversationId], references: [id])
  userId               Int
  user                 User                  @relation("UserComments", fields: [userId], references: [id])
  content              String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  notifications        Notification[]
  userActivities       UserActivity[]
}

model Topic {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  conversations        Conversation[]
}

model Notification {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  user                 User                  @relation(fields: [userId], references: [id])
  type                 String
  message              String
  isRead               Boolean               @default(false)
  createdAt            DateTime              @default(now())
  conversationId       Int?
  conversation         Conversation?         @relation(fields: [conversationId], references: [id])
  commentId            Int?
  comment              Comment?              @relation(fields: [commentId], references: [id])
}

model PasswordResetToken {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  user                 User                  @relation(fields: [userId], references: [id])
  token                String                @unique
  createdAt            DateTime              @default(now())
  expiresAt            DateTime
  isUsed               Boolean               @default(false)
}

model UserActivity {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  user                 User                  @relation(fields: [userId], references: [id])
  activityType         String
  activityTime         DateTime              @default(now())
  conversationId       Int?
  conversation         Conversation?         @relation(fields: [conversationId], references: [id])
  commentId            Int?
  comment              Comment?              @relation(fields: [commentId], references: [id])
}

model Setting {
  id                   Int                   @id @default(autoincrement())
  key                  String                @unique
  value                String
}
